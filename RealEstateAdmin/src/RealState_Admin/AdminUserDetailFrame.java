/*
* To change this license header, choose License Headers in Project Properties.
* To change this template file, choose Tools | Templates
* and open the template in the editor.
*/
package RealState_Admin;

//import com.mysql.jdbc.Connection;
import java.sql.Connection;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Minhajul Abedin
 */
public class AdminUserDetailFrame extends javax.swing.JFrame {
    
    /**
     *
     */
    private static final long serialVersionUID = 1L;
    /**
     * Creates new form AdminUserDetailFrame
     */
    String adminID=null;            //capture admin id given by constructor called from home page
    String username=null;           //store username given by constructor called from home page
    Connection con=null;            //store the connection
    PreparedStatement pst=null;     //store the statement and execute query.
    Statement st=null;              //execute the query
    ResultSet rst=null;             //save the result when fetch data from databse tables.
    String q=null;                  //store query for retrieving all property detail from book and advertisement table.
    String c1=null;                 //store query for retrieving user and property data that user advertise for sold.
    String c2=null;                 //store query for retrieving user and property data that has been sold or bought by any user.
    String c3=null;                 //store query for retrieving user and property data that has been rented by any user.
    String c4=null;                 //store query for retrieving user and property data that has been rented by any user.
    public AdminUserDetailFrame() throws SQLException {
        initComponents();
        choice1.addItem("All");
        choice1.addItem("Book");
        choice1.addItem("Advertisement");
        //retrieve user and property data that user advertise for sold.
        c1="select User_id , a.p_id AS property, location, price, size,publish_date,status from advertisement a inner join property p on a.p_id=p.p_id where status=\"for sold\"";
        //retrieve user and property data that user advertise for rent.
        c2="select User_id, a.p_id as property, location, price, size,publish_date,status from advertisement a inner join property  p on a.p_id=p.p_id where  status=\"for rent\"";
        //retrieve user and property data that has been sold or bought by any user.
        c3="select User_id,b.p_id as property, location, price, size,book_date,status from book b inner join property p on b.P_id=p.p_id where status=\"sold\" ";
        //retrieve user and property data that has been rented by any user.
        c4="select User_id,b.p_id as property, location, price, size,book_date,status from book b inner join property p on b.P_id=p.p_id where status=\"In rent\"";
        //by default all property detail from book and advertisement table.
        q="select User_id, a.p_id as property, location, price, size,publish_date,status from advertisement a inner join property p on a.p_id=p.p_id union select User_id,b.p_id as property, location, price, size,book_date,status from book b inner join property p on b.P_id=p.p_id ";
        populate_table(q);
    }
    public AdminUserDetailFrame(String userN,String userid) throws SQLException{
        this();
        adminID=userid;
        username=userN;
        aidField.setText(adminID);
        usnField.setText(username);
        populate_table(q);
    }
    /**
     * @q parameter is query string based on admin choice.
     *Assign the table data with property details based on admin choice.
     */
    public void populate_table(String q1) throws SQLException{
        try{
            con=RealState_Admin.mysql_dataBase_connection();
            //String q1=q+"and"+c1+c2+c3;
            pst= con.prepareStatement(q1);
            System.out.println(q1);
            rst=pst.executeQuery();
            //bookTable.setAutoResizeMode(bookTable.AUTO_RESIZE_ALL_COLUMNS);
            bookTable.setModel(RealState_Admin.resultSetToTableModel(rst));
           
            
            
        }
        catch(ClassNotFoundException | SQLException e){
            JOptionPane.showMessageDialog(null,e);
        }finally{
            rst.close();
            pst.close();
            con.close();
            
        }
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        usnField = new java.awt.Label();
        aidField = new java.awt.Label();
        jLabel14 = new javax.swing.JLabel();
        lgoutT = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        bookTable = new javax.swing.JTable();
        adrChoice = new javax.swing.JCheckBox();
        viewButton = new javax.swing.JButton();
        uidField = new javax.swing.JTextField();
        homepageB = new javax.swing.JButton();
        rentChoice = new javax.swing.JCheckBox();
        choice1 = new java.awt.Choice();
        adsChoice = new javax.swing.JCheckBox();
        soldChoice = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        label4 = new java.awt.Label();
        label5 = new java.awt.Label();
        label8 = new java.awt.Label();
        label7 = new java.awt.Label();
        label6 = new java.awt.Label();
        label3 = new java.awt.Label();
        label2 = new java.awt.Label();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel4.setBackground(new java.awt.Color(204, 204, 204));

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel6.setText("Admin Id:");

        jLabel13.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel13.setText("Username:");

        usnField.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        usnField.setText("U_name");

        aidField.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        aidField.setText("A_id");

        jLabel14.setFont(new java.awt.Font("Tekton Pro Cond", 2, 36)); // NOI18N
        jLabel14.setText("RealSTate.co");

        lgoutT.setBackground(new java.awt.Color(255, 204, 204));
        lgoutT.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        lgoutT.setText("Log out");
        lgoutT.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(153, 255, 204), new java.awt.Color(255, 204, 51), new java.awt.Color(153, 255, 204), new java.awt.Color(255, 218, 124)), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(255, 204, 255), new java.awt.Color(255, 255, 153), new java.awt.Color(204, 204, 255), new java.awt.Color(255, 255, 204))));
        lgoutT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lgoutTActionPerformed(evt);
            }
        });

        jLabel15.setText("Minhajul Abedin:-18301224");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 612, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(usnField, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(aidField, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(lgoutT))
                .addGap(80, 80, 80))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(aidField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(usnField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13))
                        .addGap(5, 5, 5)
                        .addComponent(lgoutT, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        bookTable.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 255), new java.awt.Color(255, 255, 204), new java.awt.Color(255, 204, 255), new java.awt.Color(204, 204, 255)), null));
        bookTable.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        bookTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            /**
             *
             */
            private static final long serialVersionUID = 1L;
            boolean[] canEdit = new boolean[] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        bookTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bookTableMouseClicked(evt);
            }
        });
        bookTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                bookTableKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(bookTable);

        adrChoice.setText("For Rent");
        adrChoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adrChoiceActionPerformed(evt);
            }
        });

        viewButton.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        viewButton.setText("View");
        viewButton.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(153, 255, 204), new java.awt.Color(255, 204, 51), new java.awt.Color(153, 255, 204), new java.awt.Color(255, 218, 124)), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(255, 204, 255), new java.awt.Color(255, 255, 153), new java.awt.Color(204, 204, 255), new java.awt.Color(255, 255, 204))));
        viewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewButtonActionPerformed(evt);
            }
        });

        uidField.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        uidField.setForeground(new java.awt.Color(153, 153, 153));
        uidField.setText("User Id");
        uidField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                uidFieldMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                uidFieldMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                uidFieldMouseExited(evt);
            }
        });
        uidField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uidFieldActionPerformed(evt);
            }
        });
        uidField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                uidFieldKeyTyped(evt);
            }
        });

        homepageB.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        homepageB.setText("Homepage");
        homepageB.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(153, 255, 204), new java.awt.Color(255, 204, 51), new java.awt.Color(153, 255, 204), new java.awt.Color(255, 218, 124)), new javax.swing.border.MatteBorder(null)));
        homepageB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homepageBActionPerformed(evt);
            }
        });

        rentChoice.setText("In Rent");
        rentChoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rentChoiceActionPerformed(evt);
            }
        });

        choice1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                choice1ItemStateChanged(evt);
            }
        });

        adsChoice.setText("For Sold");
        adsChoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adsChoiceActionPerformed(evt);
            }
        });

        soldChoice.setText("Sold");
        soldChoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                soldChoiceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(131, 131, 131)
                        .addComponent(uidField, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(viewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(homepageB, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(soldChoice)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rentChoice)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(adsChoice)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(adrChoice)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(choice1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(homepageB, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(adrChoice)
                            .addComponent(rentChoice)
                            .addComponent(adsChoice)
                            .addComponent(soldChoice)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(choice1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(uidField, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 30, Short.MAX_VALUE))
        );

        label4.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        label5.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        label5.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        label5.setPreferredSize(new java.awt.Dimension(50, 50));

        label8.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        label7.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        label6.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        label3.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        label2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Monotype Corsiva", 1, 36)); // NOI18N
        jLabel4.setText("User details");

        jLabel7.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 16)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Username:");

        jLabel5.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 16)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Name:");

        jLabel11.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 16)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("Gender:");

        jLabel10.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 16)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("Home Address:");

        jLabel12.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 16)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setText("Current Address:");

        jLabel9.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 16)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Mobile Number:");

        jLabel8.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 16)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Email:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(label2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(label3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(label8, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(label7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(label5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21)
                        .addComponent(label4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(36, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(140, 140, 140))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(14, 14, 14)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    //log out admin and go to the login page
    private void lgoutTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lgoutTActionPerformed
        AdminLoginFrame alf = new AdminLoginFrame();
        alf.setVisible(true);
        alf.setLocationRelativeTo(this);
        this.setVisible(false);
    }//GEN-LAST:event_lgoutTActionPerformed
    //which query will execute and which data will be assign to the table decide in this method based on user choice.
    private void adsChoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adsChoiceActionPerformed
        String query="";
        String item=choice1.getSelectedItem();
        String c[]={c1,c2,c3,c4};
        int [] s = {0,0,0,0};
        if(adsChoice.isSelected()) s[0]=1;
        if(adrChoice.isSelected()) s[1]=1;
        if(soldChoice.isSelected()) s[2]=1;
        if(rentChoice.isSelected()) s[3]=1;
        if(adsChoice.isSelected()&& adrChoice.isSelected()){
            c[0]+=" or status=\"for sold or rent\"";
        }
        if(item=="Advertisement"){
            if((s[0]==1 && s[1]==1) ||(s[0]==0 && s[1]==0)){
                query=c1+" union "+c2;
            }
            else if(s[0]==1) query=c1;
            else query=c2;
        }
        else{
            if((s[0]==1 && s[1]==1 && s[2]==1 && s[3]==1) ||(s[0]==0 && s[1]==0 && s[2]==0 && s[3]==0))
                query=q;
            else{
                for(int i=0;i<4;i++){
                    if(s[i]==1 && query=="") query=c[i];
                    else if(s[i]==1 && query!="") query+=" union "+c[i];
                }
            }
        }
        try {
            populate_table(query);
        } catch (SQLException ex) {
            Logger.getLogger(AdminUserDetailFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_adsChoiceActionPerformed
    //if item state changed then which choice box should appear and which query will execute decide in this mehtod
    private void choice1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_choice1ItemStateChanged
        String choice=choice1.getSelectedItem();
        if(choice=="All"){
            soldChoice.setVisible(true);
            adrChoice.setVisible(true);
            adsChoice.setVisible(true);
            rentChoice.setVisible(true);
            soldChoice.setSelected(false);
            adrChoice.setSelected(false);
            adsChoice.setSelected(false);
            rentChoice.setSelected(false);
            try {
                populate_table(q);
            } catch (SQLException ex) {
                Logger.getLogger(AdminUserDetailFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else if(choice=="Book"){
            soldChoice.setVisible(true);
            adrChoice.setVisible(false);
            adsChoice.setVisible(false);
            rentChoice.setVisible(true);
            soldChoice.setSelected(false);
            adrChoice.setSelected(false);
            adsChoice.setSelected(false);
            rentChoice.setSelected(false);
            try {
                populate_table(c3+" union "+c4);
            } catch (SQLException ex) {
                Logger.getLogger(AdminUserDetailFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
            soldChoice.setVisible(false);
            adrChoice.setVisible(true);
            adsChoice.setVisible(true);
            rentChoice.setVisible(false);
            soldChoice.setSelected(false);
            adrChoice.setSelected(false);
            adsChoice.setSelected(false);
            rentChoice.setSelected(false);
            try {
                populate_table(c1+" union "+c2);
            } catch (SQLException ex) {
                Logger.getLogger(AdminUserDetailFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_choice1ItemStateChanged
    //which query will execute and which data will be assign to the table decide in this method based on user choice.
    private void rentChoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rentChoiceActionPerformed
        
        String query="";
        String item=choice1.getSelectedItem();
        String c[]={c1,c2,c3,c4};
        int [] s = {0,0,0,0};
        if(adsChoice.isSelected()) s[0]=1;
        if(adrChoice.isSelected()) s[1]=1;
        if(soldChoice.isSelected()) s[2]=1;
        if(rentChoice.isSelected()) s[3]=1;
        if(adsChoice.isSelected()&& adrChoice.isSelected()){
            c[0]+="or status=\"for sold or rent\"";
        }
        if(item=="Book"){
            if((s[2]==1 && s[3]==1) ||(s[2]==0 && s[3]==0)){
                query=c3+" union "+c4;
            }
            else if(s[2]==1) query=c3;
            else query=c4;
        }
        else{
            if((s[0]==1 && s[1]==1 && s[2]==1 && s[3]==1) ||(s[0]==0 && s[1]==0 && s[2]==0 && s[3]==0))
                query=q;
            else{
                for(int i=0;i<4;i++){
                    if(s[i]==1 && query=="") query=c[i];
                    else if(s[i]==1 && query!="") query+=" union "+c[i];
                }
            }
        }
        
        try {
            populate_table(query);
        } catch (SQLException ex) {
            Logger.getLogger(AdminUserDetailFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_rentChoiceActionPerformed
    //admin can go to the front page by clickin homepage button
    private void homepageBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homepageBActionPerformed
        try {
            AdminFrontFrame afp=new AdminFrontFrame(username,adminID);
            afp.setVisible(true);
            afp.setLocationRelativeTo(this);
            this.setVisible(false);
        } catch (SQLException ex) {
            Logger.getLogger(AdminUserDetailFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_homepageBActionPerformed
    
    private void uidFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_uidFieldKeyTyped
        
    }//GEN-LAST:event_uidFieldKeyTyped
    //view user detail
    private void uidFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uidFieldActionPerformed
        
        viewButtonActionPerformed(evt);
    }//GEN-LAST:event_uidFieldActionPerformed
    //which query will execute and which data will be assign to the table decide in this method based on user choice.
    private void uidFieldMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_uidFieldMouseExited
        
        if(uidField.getText().equals("")){
            uidField.setForeground(new java.awt.Color(153, 153, 153));
            uidField.setText("User Id");
        }       
    }//GEN-LAST:event_uidFieldMouseExited
    
    private void uidFieldMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_uidFieldMouseEntered
        if(uidField.getText().equals("User Id")){
            uidField.setForeground(Color.BLACK);
            uidField.setText("");
        }   
    }//GEN-LAST:event_uidFieldMouseEntered
    
    private void uidFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_uidFieldMouseClicked
        uidField.setForeground(Color.BLACK);
        
    }//GEN-LAST:event_uidFieldMouseClicked
    //view user details based on text field input
    private void viewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewButtonActionPerformed
        String uid=null;
        String query=null;
        if(!uidField.getText().equals("")){
            try {
                con=RealState_Admin.mysql_dataBase_connection();
                uid=uidField.getText();
                if(uid.matches("[0-9]+")){
                    query="select user_id from book where user_id=? union select user_id from advertisement where user_id=?"; //check whether user id is exist in book table or advertisement table
                    pst=con.prepareStatement(query);
                    pst.setInt(1, Integer.parseInt(uid));
                    pst.setInt(2, Integer.parseInt(uid));
                    rst=pst.executeQuery();
                    if(rst.next()){
                        query="select user_name,Name,gender,Current_address,Home_address,mobile_number,email from user where user_id=?"; //if exist then retrieve data from user table
                        pst=con.prepareStatement(query);
                        pst.setInt(1, Integer.parseInt(uid));
                        rst=pst.executeQuery();
                        if(rst.next()){
                            //label1.setText(uid);
                            label2.setText(rst.getString("user_name"));
                            label3.setText(rst.getString("name"));
                            label4.setText(rst.getString("mobile_number"));
                            label5.setText(rst.getString("email"));
                            label6.setText(rst.getString("gender"));
                            label7.setText(rst.getString("home_address"));
                            if(rst.getString("current_address").equals(""))
                                label8.setText(rst.getString("home_address"));
                            else
                                label8.setText(rst.getString("current_address"));
                        }
                        else{
                            
                            //label1.setText("Not Found");
                            JOptionPane.showMessageDialog(this, "User not found");
                            label2.setText("Not Found");
                            label3.setText("Not Found");
                            label4.setText("Not Found");
                            label5.setText("Not Found");
                            label6.setText("Not Found");
                            label7.setText("Not Found");
                            label8.setText("Not Found");
                            
                        }
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(this, "This user not exist or still did not buy, rent or advertisement any property.");
                        label2.setText("Not Found");
                        label3.setText("Not Found");
                        label4.setText("Not Found");
                        label5.setText("Not Found");
                        label6.setText("Not Found");
                        label7.setText("Not Found");
                        label8.setText("Not Found");
                        
                    }
                }
                else{
                    JOptionPane.showMessageDialog(this, "Wrong user ID");
                }
                
                
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(AdminUserDetailFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(AdminUserDetailFrame.class.getName()).log(Level.SEVERE, null, ex);
            }finally{
                try {
                    rst.close();
                    pst.close();
                    con.close();
                    
                } catch (SQLException ex) {
                    Logger.getLogger(AdminUserDetailFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_viewButtonActionPerformed
    
//GEN-FIRST:event_buycTActionPerformed
    
//GEN-LAST:event_buycTActionPerformed
    //which query will execute and which data will be assign to the table decide in this method based on user choice.
    private void adrChoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adrChoiceActionPerformed
        String query="";
        String item=choice1.getSelectedItem();
        String c[]={c1,c2,c3,c4};
        int [] s = {0,0,0,0};
        if(adsChoice.isSelected()) s[0]=1;
        if(adrChoice.isSelected()) s[1]=1;
        if(soldChoice.isSelected()) s[2]=1;
        if(rentChoice.isSelected()) s[3]=1;
        if(adsChoice.isSelected()&& adrChoice.isSelected()){
            c[0]+="or status=\"for sold or rent\"";
        }
        if(item=="Advertisement"){
            if((s[0]==1 && s[1]==1) ||(s[0]==0 && s[1]==0)){
                query=c1+" union "+c2;
            }
            else if(s[0]==1) query=c1;
            else query=c2;
        }
        else{
            if((s[0]==1 && s[1]==1 && s[2]==1 && s[3]==1) ||(s[0]==0 && s[1]==0 && s[2]==0 && s[3]==0))
                query=q;
            else{
                for(int i=0;i<4;i++){
                    if(s[i]==1 && query=="") query=c[i];
                    else if(s[i]==1 && query!="") query+=" union "+c[i];
                }
            }
        }
        try {
            populate_table(query);
        } catch (SQLException ex) {
            Logger.getLogger(AdminUserDetailFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_adrChoiceActionPerformed
    //retrive data from user table and set to book table of jframe
    private void bookTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bookTableMouseClicked
        String query=null;
        if(bookTable.getSelectedRow()>=0){
            uidField.setText(bookTable.getValueAt(bookTable.getSelectedRow(),0).toString());
            
            try {
                con=RealState_Admin.mysql_dataBase_connection();
                query="select user_name,Name,gender,Current_address,Home_address,mobile_number,email from user where user_id=?"; //retrieve data from user table
                pst=con.prepareStatement(query);
                pst.setInt(1, (int)bookTable.getValueAt(bookTable.getSelectedRow(),0));
                rst=pst.executeQuery();
                if(rst.next()){
                    //label1.setText(uid);
                    label2.setText(rst.getString("user_name"));
                    label3.setText(rst.getString("name"));
                    label4.setText(rst.getString("mobile_number"));
                    label5.setText(rst.getString("email"));
                    label6.setText(rst.getString("gender"));
                    label7.setText(rst.getString("home_address"));
                    if(rst.getString("current_address").equals(""))
                        label8.setText(rst.getString("home_address"));
                    else
                        label8.setText(rst.getString("current_address"));
                    
                }
                
                
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(AdminUserDetailFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(AdminUserDetailFrame.class.getName()).log(Level.SEVERE, null, ex);
            }finally{
                try {
                    rst.close();
                    pst.close();
                    con.close();
                    
                } catch (SQLException ex) {
                    Logger.getLogger(AdminUserDetailFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_bookTableMouseClicked
    //which query will execute and which data will be assign to the table decide in this method based on user choice.
    private void soldChoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_soldChoiceActionPerformed
        String query="";
        String item=choice1.getSelectedItem();
        String c[]={c1,c2,c3,c4};
        int [] s = {0,0,0,0};
        if(adsChoice.isSelected()) s[0]=1;
        if(adrChoice.isSelected()) s[1]=1;
        if(soldChoice.isSelected()) s[2]=1;
        if(rentChoice.isSelected()) s[3]=1;
        if(adsChoice.isSelected()&& adrChoice.isSelected()){
            c[0]+="or status=\"for sold or rent\"";
        }
        if(item=="Book"){
            if((s[2]==1 && s[3]==1) ||(s[2]==0 && s[3]==0)){
                query=c3+" union "+c4;
            }
            else if(s[2]==1) query=c3;
            else query=c4;
        }
        else{
            if((s[0]==1 && s[1]==1 && s[2]==1 && s[3]==1) ||(s[0]==0 && s[1]==0 && s[2]==0 && s[3]==0))
                query=q;
            else{
                for(int i=0;i<4;i++){
                    if(s[i]==1 && query=="") query=c[i];
                    else if(s[i]==1 && query!="") query+=" union "+c[i];
                }
            }
        }
        
        try {
            populate_table(query);
        } catch (SQLException ex) {
            Logger.getLogger(AdminUserDetailFrame.class.getName()).log(Level.SEVERE, null, ex);
        }    
    }//GEN-LAST:event_soldChoiceActionPerformed

    private void bookTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bookTableKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_UP || evt.getKeyCode()==KeyEvent.VK_DOWN ||evt.getKeyCode()==KeyEvent.VK_ENTER) {
        String query=null;
        if(bookTable.getSelectedRow()>=0){
            uidField.setText(bookTable.getValueAt(bookTable.getSelectedRow(),0).toString());
            
            try {
                con=RealState_Admin.mysql_dataBase_connection();
                //String uid=uidField.getText();
                query="select user_name,Name,gender,Current_address,Home_address,mobile_number,email from user where user_id=?"; //retrieve data from user table
                pst=con.prepareStatement(query);
                pst.setInt(1, (int)bookTable.getValueAt(bookTable.getSelectedRow(),0));
                rst=pst.executeQuery();
                if(rst.next()){
                    //label1.setText(uid);
                    label2.setText(rst.getString("user_name"));
                    label3.setText(rst.getString("name"));
                    label4.setText(rst.getString("mobile_number"));
                    label5.setText(rst.getString("email"));
                    label6.setText(rst.getString("gender"));
                    label7.setText(rst.getString("home_address"));
                    if(rst.getString("current_address").equals(""))
                        label8.setText(rst.getString("home_address"));
                    else
                        label8.setText(rst.getString("current_address"));
                    
                }
                
                
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(AdminUserDetailFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(AdminUserDetailFrame.class.getName()).log(Level.SEVERE, null, ex);
            }finally{
                try {
                    rst.close();
                    pst.close();
                    con.close();
                    
                } catch (SQLException ex) {
                    Logger.getLogger(AdminUserDetailFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        }
    }//GEN-LAST:event_bookTableKeyPressed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
        */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminUserDetailFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminUserDetailFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminUserDetailFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminUserDetailFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                AdminUserDetailFrame audf=new AdminUserDetailFrame();
                audf.setLocationRelativeTo(null);
                audf.setVisible(true);
                
                
            } catch (SQLException ex) {
                Logger.getLogger(AdminUserDetailFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox adrChoice;
    private javax.swing.JCheckBox adsChoice;
    private java.awt.Label aidField;
    private javax.swing.JTable bookTable;
    private java.awt.Choice choice1;
    private javax.swing.JButton homepageB;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private java.awt.Label label2;
    private java.awt.Label label3;
    private java.awt.Label label4;
    private java.awt.Label label5;
    private java.awt.Label label6;
    private java.awt.Label label7;
    private java.awt.Label label8;
    private javax.swing.JButton lgoutT;
    private javax.swing.JCheckBox rentChoice;
    private javax.swing.JCheckBox soldChoice;
    private javax.swing.JTextField uidField;
    private java.awt.Label usnField;
    private javax.swing.JButton viewButton;
    // End of variables declaration//GEN-END:variables
}
